@model List<WebApplication1.Models.License>

@{
    // Sorting the licenses by expiry date, from soonest to latest. Nulls go to the end.
    var sortedLicenses = Model.OrderBy(l => l.ExpiryDate ?? DateTime.MaxValue).ToList();
}

<style>
    /* Styles for compact table and status alerts */
    .table-compact th, .table-compact td {
        padding: 5px 8px !important;
        font-size: 0.78rem !important;
    }

    .status-alert {
        padding: 4px 8px;
        border-radius: 5px;
        display: inline-flex;
        align-items: center;
        gap: 6px;
        font-weight: 500;
        font-size: 0.75rem;
        white-space: normal;
        min-width: 220px;
    }

    .status-expired {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .status-expiring-soon {
        background-color: #fff3cd;
        color: #856404;
        border: 1px solid #ffeeba;
    }

    .status-active {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .action-btns .btn {
        margin: 0 2px;
    }

    .department-badge {
        font-size: 0.7rem;
        padding: 2px 6px;
        border-radius: 3px;
        font-weight: 500;
    }

    .department-ais {
        background-color: #e3f2fd;
        color: #1565c0;
    }

    .department-cns {
        background-color: #f3e5f5;
        color: #7b1fa2;
    }

    .department-aftn {
        background-color: #e8f5e8;
        color: #2e7d32;
    }

    .department-ops {
        background-color: #fff3e0;
        color: #ef6c00;
    }
</style>

<!-- Header with record count and export buttons -->
@if (Html.HasAdvancedPermission("EMPLOYEELICENSE_VIEW") || Html.IsAdvancedAdmin())
{
<div class="d-flex flex-wrap justify-content-between align-items-center my-3">
    <div class="d-flex align-items-center">
        <h5 class="mb-0">Employees & Operation Staff Licenses</h5>
        <span id="employees-record-counter" class="badge bg-primary ms-3">@Model.Count Records</span>
    </div>
    <div>
                            @if (Html.HasAdvancedPermission("EMPLOYEELICENSE_EXPORT") || Html.IsAdvancedAdmin())
                    {
                        <button type="button" onclick="exportToFile('Employees', 'ExportToPDF', 'pdf')" class="btn btn-danger btn-sm">
                            <i class="bi bi-file-earmark-pdf"></i> Export PDF
                        </button>
                        <button type="button" onclick="exportToFile('Employees', 'ExportToExcel', 'xlsx')" class="btn btn-success btn-sm">
                            <i class="bi bi-file-earmark-excel"></i> Export Excel
                        </button>
                    }
    </div>
</div>

<div class="table-responsive">
    <table id="employeesLicensesTable" class="table table-bordered table-striped table-hover align-middle table-compact">
        <thead class="table-info">
            <tr>
                <th>#</th>
                <th>Employee</th>
                <th>Department</th>
                <th>License Type</th>
                <th>License No.</th>
                <th>Issue Date</th>
                <th style="min-width: 110px;">Expiry Date</th>
                <th style="min-width: 230px;">Status</th>
                <th>PDF</th>
                <th class="action-btns" style="min-width:130px;">Actions</th>
            </tr>
            <tr class="filters">
                <th></th>
                <th><input type="text" class="form-control form-control-sm filter-input" placeholder="Filter..." data-param-name="employeeName" data-column-index="1"></th>
                <th><input type="text" class="form-control form-control-sm filter-input" placeholder="Filter..." data-param-name="department" data-column-index="2"></th>
                <th><input type="text" class="form-control form-control-sm filter-input" placeholder="Filter..." data-param-name="licenseType" data-column-index="3"></th>
                <th><input type="text" class="form-control form-control-sm filter-input" placeholder="Filter..." data-param-name="licenseNumber" data-column-index="4"></th>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th class="text-center"><button class="btn btn-sm btn-outline-secondary clear-filters-btn" title="Clear Filters"><i class="fa-solid fa-eraser"></i></button></th>
            </tr>
        </thead>
        <tbody>
            @{
                var i = 1;
            }
            @foreach (var license in sortedLicenses)
            {
                // Determine department badge class based on employee department
                string departmentBadgeClass = "";
                if (license.EmployeeDepartment?.Contains("AIS") == true || license.EmployeeDepartment?.Contains("Aeronautical") == true)
                {
                    departmentBadgeClass = "department-ais";
                }
                else if (license.EmployeeDepartment?.Contains("CNS") == true || license.EmployeeDepartment?.Contains("Communication") == true)
                {
                    departmentBadgeClass = "department-cns";
                }
                else if (license.EmployeeDepartment?.Contains("AFTN") == true || license.EmployeeDepartment?.Contains("Telecommunication") == true)
                {
                    departmentBadgeClass = "department-aftn";
                }
                else
                {
                    departmentBadgeClass = "department-ops";
                }

                <tr>
                    <td>@(i++)</td>
                    <td>@license.EmployeeName</td>
                    <td>
                        <span class="department-badge @departmentBadgeClass">@license.EmployeeDepartment</span>
                    </td>
                    <td>
                        @license.LicenseType
                        @if (license.LicenseType == "English Proficiency Test" && !string.IsNullOrEmpty(license.RANGE))
                        {
                            <span class="text-muted fw-bold"> - @license.RANGE</span>
                        }
                    </td>
                    <td>@license.licensenumber</td>
                    <td>@(license.IssueDate?.ToString("yyyy-MM-dd") ?? "-")</td>
                    <td>@(license.ExpiryDate?.ToString("yyyy-MM-dd") ?? "-")</td>
                    <td>
                        @if (!string.IsNullOrEmpty(license.AlertMessage))
                        {
                            string statusClass = "", iconClass = "";
                            if (license.AlertMessage.Contains("expired")) { statusClass = "status-expired"; iconClass = "fa-solid fa-times-circle"; }
                            else if (license.AlertMessage.Contains("will expire")) { statusClass = "status-expiring-soon"; iconClass = "fa-solid fa-bell"; }
                            else { statusClass = "status-active"; iconClass = "fa-solid fa-check-circle"; }
                            <span class="status-alert @statusClass"><i class="@iconClass"></i> <span>@license.AlertMessage</span></span>
                        }
                    </td>
                    <td class="text-center">
                        @if (!string.IsNullOrEmpty(license.PDFPath))
                        {
                            <a class="btn btn-outline-primary btn-sm" href="@Url.Content(license.PDFPath)" target="_blank" title="Download PDF"><i class="fa-solid fa-file-pdf"></i></a>
                        }
                    </td>
                    <td class="action-btns">
                        @{
                            // Dynamic permission checking for Employee License operations
                            var canView = Html.HasAdvancedPermission("EMPLOYEELICENSE_VIEW");
                            var canAdd = Html.HasAdvancedPermission("EMPLOYEELICENSE_ADD");
                            var canEdit = Html.HasAdvancedPermission("EMPLOYEELICENSE_EDIT");
                            var canDelete = Html.HasAdvancedPermission("EMPLOYEELICENSE_DELETE");
                            var canExport = Html.HasAdvancedPermission("EMPLOYEELICENSE_EXPORT");
                            var isAdmin = Html.IsAdvancedAdmin();
                            
                            // Log permissions for debugging
                            System.Diagnostics.Debug.WriteLine($"üîç Employee License Permissions - View:{canView}, Add:{canAdd}, Edit:{canEdit}, Delete:{canDelete}, Export:{canExport}, IsAdmin:{isAdmin}");
                        }
                        
                        @* View Button - Only visible if user has view permission *@
                        @if (canView || isAdmin)
                        {
                            <button type="button" class="btn btn-info btn-sm" title="View Details"
                                    data-bs-toggle="modal" data-bs-target="#licenseDetailsModal"
                                    data-licensetype="@(license.LicenseType + (license.LicenseType == "English Proficiency Test" && !string.IsNullOrEmpty(license.RANGE) ? " - Level " + license.RANGE : ""))"
                                    data-personname="@license.EmployeeName"
                                    data-personjob="@license.EmployeeDepartment"
                                    data-licensenumber="@license.licensenumber"
                                    data-issuedate="@(license.IssueDate?.ToString("yyyy-MM-dd"))"
                                    data-expirydate="@(license.ExpiryDate?.ToString("yyyy-MM-dd"))"
                                    data-statusmessage="@license.AlertMessage"
                                    data-note="@license.Note">
                                <i class="fa-solid fa-eye"></i>
                            </button>
                        }
                        
                        @* Edit Button - Only visible if user has edit permission *@
                        @if (canEdit || isAdmin)
                        {
                            <a href="@Url.Action("Edit", "License", new { id = license.LicenseId })" class="btn btn-warning btn-sm" title="Edit"><i class="fa-solid fa-pen-to-square"></i></a>
                        }
                        
                        @* Delete Button - Only visible if user has delete permission *@
                        @if (canDelete || isAdmin)
                        {
                            <form method="post" action="@Url.Action("DeleteConfirmed", "License", new { id = license.LicenseId })" class="d-inline" onsubmit="return confirm('Are you sure you want to delete this license?');">
                                @Html.AntiForgeryToken()
                                <button type="submit" class="btn btn-danger btn-sm" title="Delete"><i class="fa-solid fa-trash"></i></button>
                            </form>
                        }
                        
                        @* Export Button - Only visible if user has export permission *@
                        @if (canExport || isAdmin)
                        {
                            <button type="button" class="btn btn-success btn-sm" title="Export License" onclick="exportLicense(@license.LicenseId)">
                                <i class="fa-solid fa-download"></i>
                            </button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    
    <script>
        // Dynamic export function for Employee Licenses
        function exportLicense(licenseId) {
            if (confirm('ŸáŸÑ ÿ™ÿ±ŸäÿØ ÿ™ÿµÿØŸäÿ± Ÿáÿ∞ÿß ÿßŸÑÿ™ÿ±ÿÆŸäÿµÿü')) {
                // Create a form to submit the export request
                var form = document.createElement('form');
                form.method = 'POST';
                form.action = '@Url.Action("ExportLicense", "License")';
                form.style.display = 'none';
                
                // Add anti-forgery token
                var token = document.querySelector('input[name="__RequestVerificationToken"]');
                if (token) {
                    var tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = token.value;
                    form.appendChild(tokenInput);
                }
                
                // Add license ID
                var idInput = document.createElement('input');
                idInput.type = 'hidden';
                idInput.name = 'licenseId';
                idInput.value = licenseId;
                form.appendChild(idInput);
                
                document.body.appendChild(form);
                form.submit();
                document.body.removeChild(form);
            }
        }
    </script>
</div>

<script>
    // Initialize DataTable for Employees Licenses
    $(document).ready(function() {
        var employeesTable = $('#employeesLicensesTable').DataTable({
            "pageLength": 25,
            "order": [[6, "asc"]], // Sort by expiry date column
            "language": {
                "search": "Search:",
                "lengthMenu": "Show _MENU_ records per page",
                "info": "Showing _START_ to _END_ of _TOTAL_ records",
                "infoEmpty": "Showing 0 to 0 of 0 records",
                "infoFiltered": "(filtered from _MAX_ total records)",
                "paginate": {
                    "first": "First",
                    "last": "Last",
                    "next": "Next",
                    "previous": "Previous"
                }
            },
            "columnDefs": [
                { "orderable": false, "targets": [8, 9] } // PDF and Actions columns
            ]
        });

        // Filter functionality
        $('.filter-input').on('keyup change', function() {
            var columnIndex = $(this).data('column-index');
            var searchValue = $(this).val();
            employeesTable.column(columnIndex).search(searchValue).draw();
        });

        // Clear filters
        $('.clear-filters-btn').on('click', function() {
            $('.filter-input').val('');
            employeesTable.search('').columns().search('').draw();
        });
    });
</script>
} 