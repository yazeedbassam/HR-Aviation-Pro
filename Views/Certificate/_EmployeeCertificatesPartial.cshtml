@model List<WebApplication1.Models.CertificateViewModel>

@{
    var sortedCertificates = Model.OrderByDescending(c => c.IssueDate).ToList();
}

<!-- Header with record count and export buttons -->
<div class="d-flex flex-wrap justify-content-between align-items-center my-3">
    <div class="d-flex align-items-center">
        <h5 class="mb-0">Employee Certificates & Courses</h5>
        <span id="employee-cert-counter" class="badge bg-primary ms-3">@Model.Count Records</span>
    </div>
    <div>
        <button type="button" onclick="exportToFile('Employee', 'ExportToPDF', 'pdf')" class="btn btn-danger btn-sm">
            <i class="bi bi-file-earmark-pdf"></i> Export PDF
        </button>
        <button type="button" onclick="exportToFile('Employee', 'ExportToExcel', 'xlsx')" class="btn btn-success btn-sm">
            <i class="bi bi-file-earmark-excel"></i> Export Excel
        </button>
    </div>
</div>

<div class="table-responsive">
    <table id="employeeCertsTable" class="table table-bordered table-striped table-hover align-middle table-compact">
        <thead class="table-primary">
            <tr>
                <th>#</th>
                <th>Employee</th>
                <th>Type</th>
                <th>Title</th>
                <th>Issued</th>
                <th>Expiry</th>
                <th>Status</th>
                <th>File</th>
                <th class="action-btns" style="min-width:130px;">Actions</th>
            </tr>
            <tr class="filters">
                <th></th>
                <th><input type="text" class="form-control form-control-sm filter-input" placeholder="Filter..." data-param-name="personName" data-column-index="1"></th>
                <th><input type="text" class="form-control form-control-sm filter-input" placeholder="Filter..." data-param-name="typeName" data-column-index="2"></th>
                <th><input type="text" class="form-control form-control-sm filter-input" placeholder="Filter..." data-param-name="title" data-column-index="3"></th>
                <th></th>
                <th></th>
                <th><input type="text" class="form-control form-control-sm filter-input" placeholder="Filter..." data-param-name="status" data-column-index="6"></th>
                <th></th>
                <th class="text-center"><button class="btn btn-sm btn-outline-secondary clear-filters-btn" title="Clear Filters"><i class="fa-solid fa-eraser"></i></button></th>
            </tr>
        </thead>
        <tbody>
            @{
                var i = 1;
            }
            @foreach (var cert in sortedCertificates)
            {
                <tr>
                    <td>@(i++)</td>
                    <td>@cert.EmployeeName</td>
                    <td>@cert.TypeName</td>
                    <td>@cert.Title</td>
                    <td>@cert.IssueDate?.ToString("yyyy-MM-dd")</td>
                    <td>@cert.ExpiryDate?.ToString("yyyy-MM-dd")</td>
                    <td>
                        <span class="badge badge-status @(cert.Status == "Completed" ? "bg-success" : cert.Status == "Rejected" ? "bg-danger" : "bg-warning text-dark")">
                            @cert.Status
                        </span>
                    </td>
                    <td class="text-center">
                        @if (!string.IsNullOrEmpty(cert.FilePath))
                        {
                            <a class="btn btn-outline-primary btn-sm" href="@Url.Content(cert.FilePath)" target="_blank" title="Download File"><i class="fa-solid fa-file-pdf"></i></a>
                        }
                    </td>
                    <td class="action-btns">
                        <button type="button" class="btn btn-info btn-sm" title="View Details"
                                data-bs-toggle="modal" data-bs-target="#certificateDetailsModal"
                                data-person-name="@cert.EmployeeName"
                                data-person-type="Employee"
                                data-type-name="@cert.TypeName"
                                data-title="@cert.Title"
                                data-issue-date="@cert.IssueDate?.ToString("yyyy-MM-dd")"
                                data-expiry-date="@cert.ExpiryDate?.ToString("yyyy-MM-dd")"
                                data-status="@cert.Status">
                            <i class="fa-solid fa-eye"></i>
                        </button>
                        <a href="@Url.Action("Edit", "Certificate", new { id = cert.CertificateId })" class="btn btn-warning btn-sm" title="Edit"><i class="fa-solid fa-pen-to-square"></i></a>
                        <a href="@Url.Action("Delete", "Certificate", new { id = cert.CertificateId })" class="btn btn-danger btn-sm" title="Delete" onclick="return confirm('Are you sure?');"><i class="fa-solid fa-trash"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<script>
    (function() {
        const container = document.getElementById('employees-cert-pane');
        if (!container) return;
        const table = container.querySelector('#employeeCertsTable');
        const filterInputs = container.querySelectorAll('.filters .filter-input');
        const tableRows = table.querySelectorAll('tbody tr');
        const counter = container.querySelector('#employee-cert-counter');
        const clearBtn = container.querySelector('.clear-filters-btn');
        function applyFilters() {
            let visibleRowCount = 0;
            const filters = Array.from(filterInputs).map(input => ({
                value: input.value.toLowerCase(),
                columnIndex: parseInt(input.getAttribute('data-column-index'))
            }));
            tableRows.forEach(row => {
                let isVisible = true;
                for (const filter of filters) {
                    if (filter.value === '') continue;
                    const cell = row.cells[filter.columnIndex];
                    const cellText = cell ? cell.innerText.toLowerCase() : '';
                    if (!cellText.includes(filter.value)) {
                        isVisible = false;
                        break;
                    }
                }
                row.style.display = isVisible ? '' : 'none';
                if (isVisible) visibleRowCount++;
            });
            if(counter) counter.innerText = `${visibleRowCount} Records`;
        }
        filterInputs.forEach(input => input.addEventListener('keyup', applyFilters));
        if(clearBtn) clearBtn.addEventListener('click', () => {
            filterInputs.forEach(input => input.value = '');
            applyFilters();
        });
    })();
</script>
