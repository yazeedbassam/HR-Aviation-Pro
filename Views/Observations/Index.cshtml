@model WebApplication1.Models.ObservationIndexViewModel

@{
    ViewData["Title"] = "Observations";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">

<style>
    .custom-card {
        max-width: 99vw;
        margin: 18px auto 5px auto;
        border-radius: 11px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.06);
    }

    .main-header {
        font-size: 1.1rem;
        font-weight: 600;
        color: #146c43;
    }

    .nav-tabs .nav-link {
        font-weight: 500;
        color: #495057;
    }

        .nav-tabs .nav-link.active {
            color: #146c43;
            font-weight: 600;
            border-color: #dee2e6 #dee2e6 #fff;
        }

    .modal-body .details-list li {
        margin-bottom: 8px;
        font-size: 0.9rem;
    }

    .modal-body .details-list .detail-label {
        font-weight: 600;
        min-width: 140px;
        display: inline-block;
    }
</style>

<div class="container-fluid">
    <div class="card custom-card bg-white px-3 py-4">
        <!-- Header with Title and Global Buttons -->
        <div class="d-flex flex-wrap justify-content-between align-items-center mb-3">
            <div class="main-header">
                <i class="fa-solid fa-search me-2"></i>
                @ViewData["Title"]
            </div>
            <div>
                @* Controller Observations Add Button *@
                @if (Html.HasAdvancedPermission("CONTROLLEROBSERVATION_ADD") || Html.IsAdvancedAdmin())
                {
                    <a href="@Url.Action("Create", "Observations", new { tab = "controllers" })" class="btn btn-success btn-sm me-2" id="add-controller-observation">
                        <i class="fa-solid fa-plus"></i> + Add Controller Observation
                    </a>
                }
                
                @* Employee Observations Add Button *@
                @if (Html.HasAdvancedPermission("EMPLOYEEOBSERVATION_ADD") || Html.IsAdvancedAdmin())
                {
                    <a href="@Url.Action("Create", "Observations", new { tab = "employees" })" class="btn btn-success btn-sm me-2" id="add-employee-observation">
                        <i class="fa-solid fa-plus"></i> + Add Employee Observation
                    </a>
                }
                
                <a href="/" class="btn btn-secondary btn-sm">
                    <i class="fa-solid fa-house"></i> Home
                </a>
            </div>
        </div>

        @if (TempData["SuccessMessage"] != null)
        {
            <div class="alert alert-success">@TempData["SuccessMessage"]</div>
        }
        @if (ViewBag.ErrorMessage != null)
        {
            <div class="alert alert-danger">@ViewBag.ErrorMessage</div>
        }

        <!-- Tabs Navigation -->
        <ul class="nav nav-tabs" id="observationTab" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="controllers-obs-tab" data-bs-toggle="tab" data-bs-target="#controllers-obs-pane" type="button" role="tab">Controller Observations</button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="employees-obs-tab" data-bs-toggle="tab" data-bs-target="#employees-obs-pane" type="button" role="tab">Employees & Operation Staff</button>
            </li>
        </ul>

        <!-- Tabs Content -->
        <div class="tab-content pt-2" id="observationTabContent">
            <div class="tab-pane fade show active" id="controllers-obs-pane" role="tabpanel">
                @await Html.PartialAsync("_ControllerObservationsPartial", Model.ControllerObservations)
            </div>
            <div class="tab-pane fade" id="employees-obs-pane" role="tabpanel">
                @await Html.PartialAsync("_EmployeeObservationsPartial", Model.EmployeesAndOpsStaffObservations)
            </div>
        </div>
    </div>
</div>

<!-- Details Modal -->
<div class="modal fade" id="observationDetailsModal" tabindex="-1" aria-labelledby="observationDetailsModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="observationDetailsModalLabel">Observation Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <ul class="details-list">
                    <li><span class="detail-label">Person:</span> <span id="modalPersonName"></span></li>
                    <li><span class="detail-label">Department:</span> <span id="modalPersonDepartment"></span></li>
                    <hr />
                    <li><span class="detail-label">Observation #:</span> <span id="modalObservationNo"></span></li>
                    <li><span class="detail-label">Flight No:</span> <span id="modalFlightNo"></span></li>
                    <li><span class="detail-label">Country:</span> <span id="modalCountry"></span></li>
                    <li><span class="detail-label">Days:</span> <span id="modalDays"></span></li>
                    <li><span class="detail-label">Depart Date:</span> <span id="modalDepartDate"></span></li>
                    <li><span class="detail-label">Return Date:</span> <span id="modalReturnDate"></span></li>
                    <li><span class="detail-label">License Number:</span> <span id="modalLicenseNumber"></span></li>
                    <li><span class="detail-label">Notes:</span> <span id="modalNotes"></span></li>
                </ul>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        function initializeTable(tableId, counterId) {
            const container = document.getElementById(tableId.replace('#', ''));
            if (!container) return;

            const table = container.querySelector('table');
            const filterInputs = container.querySelectorAll('.filters .filter-input');
            const tableRows = table.querySelectorAll('tbody tr');
            const counter = container.querySelector(`#${counterId}`);
            const clearBtn = container.querySelector('.clear-filters-btn');

            function applyFilters() {
                let visibleRowCount = 0;
                const filters = Array.from(filterInputs).map(input => ({
                    value: input.value.toLowerCase(),
                    columnIndex: parseInt(input.getAttribute('data-column-index'))
                }));

                tableRows.forEach(row => {
                    let isVisible = true;
                    for (const filter of filters) {
                        if (filter.value === '') continue;
                        const cell = row.cells[filter.columnIndex];
                        if (!cell) continue;
                        
                        // Special handling for Observation No. column (first column)
                        let cellText = '';
                        if (filter.columnIndex === 0) {
                            // Extract trip number from badge text
                            const badge = cell.querySelector('.badge');
                            if (badge) {
                                const badgeText = badge.innerText.toLowerCase();
                                if (badgeText.includes('1st')) {
                                    cellText = '1st first trip';
                                } else {
                                    // Extract number from badge text like "2", "3", etc.
                                    const match = badgeText.match(/\d+/);
                                    if (match) {
                                        cellText = match[0] + ' trip';
                                    }
                                }
                            }
                        } else {
                            cellText = cell.innerText.toLowerCase();
                        }
                        
                        if (!cellText.includes(filter.value)) {
                            isVisible = false;
                            break;
                        }
                    }
                    row.style.display = isVisible ? '' : 'none';
                    if (isVisible) visibleRowCount++;
                });

                if (counter) counter.innerText = `Showing ${visibleRowCount} of ${tableRows.length} Records`;
            }

            filterInputs.forEach(input => {
                input.addEventListener('keyup', applyFilters);
            });

            if (clearBtn) {
                clearBtn.addEventListener('click', function() {
                    filterInputs.forEach(input => {
                        input.value = '';
                    });
                    applyFilters();
                });
            }

            // Initial call to set the counter correctly
            applyFilters();
        }

        // Initialize both tables on page load
        document.addEventListener('DOMContentLoaded', function () {
            initializeTable('controllerObsTable', 'controller-obs-counter');
            initializeTable('employeesObsTable', 'employees-obs-counter');
        });

        function getExportUrl(personType, action) {
            let tableId;
            switch(personType) {
                case 'Controller': 
                    tableId = '#controllerObsTable'; 
                    break;
                case 'Employees': 
                    tableId = '#employeesObsTable'; 
                    break;
                default: 
                    tableId = '#employeesObsTable';
            }
            
            const filterInputs = document.querySelectorAll(`${tableId} .filters .filter-input`);
            const params = new URLSearchParams();

            filterInputs.forEach(input => {
                const value = input.value.trim();
                const paramName = input.getAttribute('data-param-name');
                if (value !== '' && paramName) params.append(paramName, value);
            });

            params.append('personType', personType);
            return `/Observations/${action}?${params.toString()}`;
        }

        function exportToFile(personType, action, fileExtension) {
            const url = getExportUrl(personType, action);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.setAttribute('download', `${personType}_Observations_Report_${new Date().toISOString().slice(0, 10)}.${fileExtension}`);
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
        }

        // Tab switching logic for buttons
        document.addEventListener('DOMContentLoaded', function() {
            const controllersTab = document.getElementById('controllers-obs-tab');
            const employeesTab = document.getElementById('employees-obs-tab');
            const addControllerObservation = document.getElementById('add-controller-observation');
            const addEmployeeObservation = document.getElementById('add-employee-observation');

            function updateButtons(activeTab) {
                if (activeTab === 'controllers') {
                    addControllerObservation.style.display = 'inline-block';
                    addEmployeeObservation.style.display = 'none';
                } else {
                    addControllerObservation.style.display = 'none';
                    addEmployeeObservation.style.display = 'inline-block';
                }
            }

            // Listen for tab changes
            controllersTab.addEventListener('click', () => updateButtons('controllers'));
            employeesTab.addEventListener('click', () => updateButtons('employees'));

            // Set initial state
            updateButtons('controllers');
        });

        // Modal logic
        const observationDetailsModal = document.getElementById('observationDetailsModal');
        if (observationDetailsModal) {
            observationDetailsModal.addEventListener('show.bs.modal', function (event) {
                const button = event.relatedTarget;

                document.getElementById('modalPersonName').textContent = button.getAttribute('data-person-name') || "-";
                document.getElementById('modalPersonDepartment').textContent = button.getAttribute('data-person-type') || "-";
                document.getElementById('modalObservationNo').textContent = button.getAttribute('data-obs-no') || "-";
                document.getElementById('modalFlightNo').textContent = button.getAttribute('data-flight-no') || "-";
                document.getElementById('modalCountry').textContent = button.getAttribute('data-country') || "-";
                document.getElementById('modalDays').textContent = button.getAttribute('data-duration') || "-";
                document.getElementById('modalDepartDate').textContent = button.getAttribute('data-depart-date') || "-";
                document.getElementById('modalReturnDate').textContent = button.getAttribute('data-return-date') || "-";
                document.getElementById('modalLicenseNumber').textContent = button.getAttribute('data-license-no') || "-";
                document.getElementById('modalNotes').textContent = button.getAttribute('data-notes') || "-";
            });
        }
    </script>
}
