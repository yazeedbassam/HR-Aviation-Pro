@model WebApplication1.Models.ConfigurationManagementViewModel
@{
    ViewData["Title"] = "System Configuration";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <!-- Page Header -->
    <div class="page-header">
        <div class="row align-items-center">
            <div class="col">
                <h3 class="page-title">
                    <i class="fas fa-cogs"></i> System Configuration
                </h3>
                <ul class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Dashboard</a></li>
                    <li class="breadcrumb-item active">Configuration</li>
                </ul>
            </div>
            <div class="col-auto">
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createCategoryModal">
                        <i class="fas fa-plus"></i> Add Category
                    </button>
                    <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createValueModal">
                        <i class="fas fa-plus"></i> Add Value
                    </button>
                    <a href="@Url.Action("Statistics")" class="btn btn-info">
                        <i class="fas fa-chart-bar"></i> Statistics
                    </a>
                    <a href="@Url.Action("Logs")" class="btn btn-warning">
                        <i class="fas fa-history"></i> Logs
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Alert Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    <div class="row">
        <!-- Categories Sidebar -->
        <div class="col-md-3">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-list"></i> Categories
                    </h5>
                </div>
                <div class="card-body p-0">
                    <div class="list-group list-group-flush">
                        @foreach (var category in Model.Categories)
                        {
                            <a href="@Url.Action("Category", new { categoryName = category.CategoryName })" 
                               class="list-group-item list-group-item-action @(Model.SelectedCategory?.CategoryId == category.CategoryId ? "active" : "")">
                                <div class="d-flex w-100 justify-content-between">
                                    <h6 class="mb-1">@category.DisplayName</h6>
                                    <small class="text-muted">@category.Values.Count</small>
                                </div>
                                <small class="text-muted">@category.Description</small>
                            </a>
                        }
                    </div>
                </div>
            </div>

            <!-- Cache Management -->
            <div class="card mt-3">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-database"></i> Cache Management
                    </h5>
                </div>
                <div class="card-body">
                    <form method="post" action="@Url.Action("RefreshCache")" class="d-inline">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-sm btn-outline-primary mb-2 w-100">
                            <i class="fas fa-sync"></i> Refresh Cache
                        </button>
                    </form>
                    <form method="post" action="@Url.Action("ClearCache")" class="d-inline">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-sm btn-outline-danger w-100" 
                                onclick="return confirm('Are you sure you want to clear the cache?')">
                            <i class="fas fa-trash"></i> Clear Cache
                        </button>
                    </form>
                </div>
            </div>
        </div>

        <!-- Values Content -->
        <div class="col-md-9">
            @if (Model.SelectedCategory != null)
            {
                <div class="card">
                    <div class="card-header">
                        <div class="row align-items-center">
                            <div class="col">
                                <h5 class="card-title mb-0">
                                    <i class="fas fa-tags"></i> @Model.SelectedCategory.DisplayName
                                </h5>
                                <small class="text-muted">@Model.SelectedCategory.Description</small>
                            </div>
                            <div class="col-auto">
                                <button type="button" class="btn btn-primary btn-sm" 
                                        onclick="createValue('@Model.SelectedCategory.CategoryName')">
                                    <i class="fas fa-plus"></i> Add Value
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        @if (Model.Values.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th>Display Text</th>
                                            <th>Value Key</th>
                                            <th>Order</th>
                                            <th>Status</th>
                                            <th>Created</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var value in Model.Values.OrderBy(v => v.DisplayOrder).ThenBy(v => v.ValueText))
                                        {
                                            <tr>
                                                <td>
                                                    <strong>@value.ValueText</strong>
                                                </td>
                                                <td>
                                                    <code>@value.ValueKey</code>
                                                </td>
                                                <td>
                                                    <span class="badge bg-secondary">@value.DisplayOrder</span>
                                                </td>
                                                <td>
                                                    @if (value.IsActive)
                                                    {
                                                        <span class="badge bg-success">Active</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-danger">Inactive</span>
                                                    }
                                                </td>
                                                <td>
                                                    <small class="text-muted">
                                                        @value.CreatedDate.ToString("MMM dd, yyyy")
                                                    </small>
                                                </td>
                                                <td>
                                                    <div class="btn-group btn-group-sm" role="group">
                                                        <button type="button" class="btn btn-outline-primary" 
                                                                onclick="editValue(@value.ValueId)">
                                                            <i class="fas fa-edit"></i>
                                                        </button>
                                                        <button type="button" class="btn btn-outline-danger" 
                                                                onclick="deleteValue(@value.ValueId, '@value.ValueText')">
                                                            <i class="fas fa-trash"></i>
                                                        </button>
                                                    </div>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-inbox fa-3x text-muted mb-3"></i>
                                <h5 class="text-muted">No values found</h5>
                                <p class="text-muted">Click "Add Value" to create the first value for this category.</p>
                                <button type="button" class="btn btn-primary" 
                                        onclick="createValue('@Model.SelectedCategory.CategoryName')">
                                    <i class="fas fa-plus"></i> Add First Value
                                </button>
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-cogs fa-4x text-muted mb-4"></i>
                        <h4 class="text-muted">Welcome to System Configuration</h4>
                        <p class="text-muted mb-4">
                            Select a category from the sidebar to manage its values, or create a new category to get started.
                        </p>
                        <div class="btn-group" role="group">
                            <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createCategoryModal">
                                <i class="fas fa-plus"></i> Create Category
                            </button>
                            <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#createValueModal">
                                <i class="fas fa-plus"></i> Add Value
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Create Category Modal -->
<div class="modal fade" id="createCategoryModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-plus"></i> Create New Category
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="CreateCategory" method="post">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="CategoryName" class="form-label">Category Name</label>
                        <input type="text" class="form-control" id="CategoryName" name="CategoryName" 
                               placeholder="e.g., JobTitles" required>
                        <div class="form-text">Internal name used in code (no spaces, use PascalCase)</div>
                    </div>
                    <div class="mb-3">
                        <label for="DisplayName" class="form-label">Display Name</label>
                        <input type="text" class="form-control" id="DisplayName" name="DisplayName" 
                               placeholder="e.g., Job Titles" required>
                        <div class="form-text">User-friendly name displayed in the interface</div>
                    </div>
                    <div class="mb-3">
                        <label for="Description" class="form-label">Description</label>
                        <textarea class="form-control" id="Description" name="Description" rows="3" 
                                  placeholder="Brief description of this category"></textarea>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="DisplayOrder" class="form-label">Display Order</label>
                                <input type="number" class="form-control" id="DisplayOrder" name="DisplayOrder" 
                                       value="0" min="0">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <div class="form-check mt-4">
                                    <input class="form-check-input" type="checkbox" id="IsActive" name="IsActive" checked>
                                    <label class="form-check-label" for="IsActive">
                                        Active
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Create Category
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- Create Value Modal -->
<div class="modal fade" id="createValueModal" tabindex="-1" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-plus"></i> Create New Value
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-action="CreateValue" method="post" id="createValueForm">
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="ValueCategoryId" class="form-label">Category</label>
                        <select class="form-select" id="ValueCategoryId" name="CategoryId" required>
                            <option value="">-- Select Category --</option>
                            @foreach (var category in Model.Categories)
                            {
                                <option value="@category.CategoryId">@category.DisplayName</option>
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="ValueKey" class="form-label">Value Key</label>
                        <input type="text" class="form-control" id="ValueKey" name="ValueKey" 
                               placeholder="e.g., ATC" required>
                        <div class="form-text">Internal key used in code (no spaces, use UPPER_CASE)</div>
                    </div>
                    <div class="mb-3">
                        <label for="ValueText" class="form-label">Display Text</label>
                        <input type="text" class="form-control" id="ValueText" name="ValueText" 
                               placeholder="e.g., Air Traffic Controller" required>
                        <div class="form-text">Text displayed to users</div>
                    </div>
                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label for="ValueDisplayOrder" class="form-label">Display Order</label>
                                <input type="number" class="form-control" id="ValueDisplayOrder" name="DisplayOrder" 
                                       value="0" min="0">
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <div class="form-check mt-4">
                                    <input class="form-check-input" type="checkbox" id="ValueIsActive" checked>
                                    <input type="hidden" name="IsActiveString" id="ValueIsActiveHidden" value="true">
                                    <label class="form-check-label" for="ValueIsActive">
                                        Active
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary" id="createValueSubmitBtn">
                        <i class="fas fa-save"></i> Create Value
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        /* Force modal to be on top and disable background interactions */
        .modal-backdrop {
            z-index: 1040 !important;
        }
        
        .modal {
            z-index: 1050 !important;
        }
        
        /* Disable sidebar interactions when modal is open */
        body.modal-open .sidebar,
        body.modal-open .main-content,
        body.modal-open .page-header {
            pointer-events: none !important;
        }
        
        /* Alternative: disable all background interactions */
        body.modal-open {
            overflow: hidden;
        }
        
        body.modal-open .modal {
            pointer-events: auto !important;
        }
        
        /* Prevent modal from being too small */
        .modal-dialog {
            min-width: 500px;
        }
        
        /* Improve modal appearance */
        .modal-content {
            border: none;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
        }
    </style>
    
    <script>
        function createValue(categoryName) {
            if (categoryName) {
                // Set the category in the modal
                var categorySelect = document.getElementById('ValueCategoryId');
                if (categorySelect) {
                    // Find by display name (text) since we're passing CategoryName
                    for (var i = 0; i < categorySelect.options.length; i++) {
                        var option = categorySelect.options[i];
                        if (option.text && option.text.toLowerCase().includes(categoryName.toLowerCase())) {
                            categorySelect.selectedIndex = i;
                            break;
                        }
                    }
                }
            }
            
            // Show the create value modal with proper backdrop
            var modal = new bootstrap.Modal(document.getElementById('createValueModal'), {
                backdrop: 'static',
                keyboard: false
            });
            modal.show();
            
            // Add body class to disable background interactions
            document.body.classList.add('modal-open');
            
            // Remove class when modal is hidden
            document.getElementById('createValueModal').addEventListener('hidden.bs.modal', function() {
                document.body.classList.remove('modal-open');
            });
            
            // Prevent modal from closing when clicking outside
            document.getElementById('createValueModal').addEventListener('click', function(e) {
                if (e.target === this) {
                    e.stopPropagation();
                }
            });
        }
        
        // Auto-open modal if TempData indicates it
        @if (TempData["OpenCreateModal"] != null)
        {
            <text>
            document.addEventListener('DOMContentLoaded', function() {
                createValue('@TempData["OpenCreateModal"]');
            });
            </text>
        }

        function editValue(valueId) {
            window.location.href = '@Url.Action("EditValue")/' + valueId;
        }

        function deleteValue(valueId, valueText) {
            if (confirm('Are you sure you want to delete "' + valueText + '"? This action cannot be undone.')) {
                var form = document.createElement('form');
                form.method = 'POST';
                form.action = '@Url.Action("DeleteValue")/' + valueId;
                
                var token = document.createElement('input');
                token.type = 'hidden';
                token.name = '__RequestVerificationToken';
                token.value = document.querySelector('input[name="__RequestVerificationToken"]').value;
                
                form.appendChild(token);
                document.body.appendChild(form);
                form.submit();
            }
        }

        // Auto-generate Value Key from Display Text in modal
        document.addEventListener('DOMContentLoaded', function() {
            var valueTextInput = document.getElementById('ValueText');
            var valueKeyInput = document.getElementById('ValueKey');
            var valueIsActiveCheckbox = document.getElementById('ValueIsActive');
            var valueIsActiveHidden = document.getElementById('ValueIsActiveHidden');
            
            if (valueTextInput && valueKeyInput) {
                valueTextInput.addEventListener('input', function() {
                    var displayText = this.value;
                    var valueKey = displayText
                        .toUpperCase()
                        .replace(/[^A-Z0-9]/g, '_')
                        .replace(/_+/g, '_')
                        .replace(/^_|_$/g, '');
                    
                    valueKeyInput.value = valueKey;
                });
            }
            
            // Handle checkbox change for IsActive
            if (valueIsActiveCheckbox && valueIsActiveHidden) {
                valueIsActiveCheckbox.addEventListener('change', function() {
                    valueIsActiveHidden.value = this.checked ? 'true' : 'false';
                });
            }
            
            // Prevent form submission issues
            var createValueForm = document.querySelector('#createValueModal form');
            if (createValueForm) {
                createValueForm.addEventListener('submit', function(e) {
                    // Validate required fields
                    var categorySelect = document.getElementById('ValueCategoryId');
                    var valueKeyInput = document.getElementById('ValueKey');
                    var valueTextInput = document.getElementById('ValueText');
                    
                    if (!categorySelect.value) {
                        e.preventDefault();
                        alert('Please select a category');
                        categorySelect.focus();
                        return false;
                    }
                    
                    if (!valueKeyInput.value.trim()) {
                        e.preventDefault();
                        alert('Please enter a value key');
                        valueKeyInput.focus();
                        return false;
                    }
                    
                    if (!valueTextInput.value.trim()) {
                        e.preventDefault();
                        alert('Please enter display text');
                        valueTextInput.focus();
                        return false;
                    }
                    
                    // Show loading state
                    var submitBtn = document.getElementById('createValueSubmitBtn');
                    submitBtn.disabled = true;
                    submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Creating...';
                });
            }
        });
    </script>
} 